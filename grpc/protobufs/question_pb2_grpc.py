# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from protobufs import question_pb2 as protobufs_dot_question__pb2


class QuestionControllerStub(object):
    """The QuestionController service defines the API for operations related to Question objects.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateOrUpdateQuestion = channel.unary_unary(
                '/question.QuestionController/CreateOrUpdateQuestion',
                request_serializer=protobufs_dot_question__pb2.Question.SerializeToString,
                response_deserializer=protobufs_dot_question__pb2.Question.FromString,
                )
        self.GetQuestions = channel.unary_stream(
                '/question.QuestionController/GetQuestions',
                request_serializer=protobufs_dot_question__pb2.QuestionFilters.SerializeToString,
                response_deserializer=protobufs_dot_question__pb2.Question.FromString,
                )
        self.GetQuestion = channel.unary_unary(
                '/question.QuestionController/GetQuestion',
                request_serializer=protobufs_dot_question__pb2.QuestionRequest.SerializeToString,
                response_deserializer=protobufs_dot_question__pb2.Question.FromString,
                )
        self.UpvoteQuestion = channel.unary_unary(
                '/question.QuestionController/UpvoteQuestion',
                request_serializer=protobufs_dot_question__pb2.QuestionRequest.SerializeToString,
                response_deserializer=protobufs_dot_question__pb2.Question.FromString,
                )


class QuestionControllerServicer(object):
    """The QuestionController service defines the API for operations related to Question objects.
    """

    def CreateOrUpdateQuestion(self, request, context):
        """Create a new question.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetQuestions(self, request, context):
        """Get a list of questions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetQuestion(self, request, context):
        """Get a specific question by its ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpvoteQuestion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QuestionControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateOrUpdateQuestion': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateOrUpdateQuestion,
                    request_deserializer=protobufs_dot_question__pb2.Question.FromString,
                    response_serializer=protobufs_dot_question__pb2.Question.SerializeToString,
            ),
            'GetQuestions': grpc.unary_stream_rpc_method_handler(
                    servicer.GetQuestions,
                    request_deserializer=protobufs_dot_question__pb2.QuestionFilters.FromString,
                    response_serializer=protobufs_dot_question__pb2.Question.SerializeToString,
            ),
            'GetQuestion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQuestion,
                    request_deserializer=protobufs_dot_question__pb2.QuestionRequest.FromString,
                    response_serializer=protobufs_dot_question__pb2.Question.SerializeToString,
            ),
            'UpvoteQuestion': grpc.unary_unary_rpc_method_handler(
                    servicer.UpvoteQuestion,
                    request_deserializer=protobufs_dot_question__pb2.QuestionRequest.FromString,
                    response_serializer=protobufs_dot_question__pb2.Question.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'question.QuestionController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class QuestionController(object):
    """The QuestionController service defines the API for operations related to Question objects.
    """

    @staticmethod
    def CreateOrUpdateQuestion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/question.QuestionController/CreateOrUpdateQuestion',
            protobufs_dot_question__pb2.Question.SerializeToString,
            protobufs_dot_question__pb2.Question.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetQuestions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/question.QuestionController/GetQuestions',
            protobufs_dot_question__pb2.QuestionFilters.SerializeToString,
            protobufs_dot_question__pb2.Question.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetQuestion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/question.QuestionController/GetQuestion',
            protobufs_dot_question__pb2.QuestionRequest.SerializeToString,
            protobufs_dot_question__pb2.Question.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpvoteQuestion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/question.QuestionController/UpvoteQuestion',
            protobufs_dot_question__pb2.QuestionRequest.SerializeToString,
            protobufs_dot_question__pb2.Question.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
